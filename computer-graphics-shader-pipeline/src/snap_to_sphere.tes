// Hint: Crib from your model_view_projection.vs
// Layout:
//                                         Indicate that we're dealing with
//                                         triangles in CCW order and using a
//                                         sane spacing.
layout(triangles, equal_spacing, ccw) in;
// Uniforms
uniform mat4 view;
uniform mat4 proj;
uniform float animation_seconds;
uniform bool is_moon;
// Inputs:
//                    array of 3 3D patch corner positions
in vec4 pos_es_in[];

// Outputs:
//                   projected, view, and model transformed 3D position
out vec4 pos_fs_in;
//                        view and model transformed 3D position
out vec4 view_pos_fs_in;
//                      view and model transformed 3D normal
out vec3 normal_fs_in;
//                      3D position _before_ applying model, view or projection
//                      transformations (e.g., point on unit sphere)
out vec3 sphere_fs_in;
// expects: interpolat, model, 

void main()
{
  /////////////////////////////////////////////////////////////////////////////
  // Replace with your code
  // https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/gl_TessCoord.xhtml
  // gl_TessCoord â€” contains the coordinate of the vertex within the current patch
  
  pos_fs_in = interpolate(gl_TessCoord, pos_es_in[0], pos_es_in[1], pos_es_in[2]);
  vec4 interp = vec4(normalize(pos_fs_in.xyz), 1);
  //sphere_fs_in
  sphere_fs_in = interp.xyz;

  // From model_view_projection.vs
  mat4 modelMatrix = model(is_moon, animation_seconds);
  if(is_moon){
    modelMatrix = modelMatrix * translate(vec3(2,0,0)) * uniform_scale(0.3);
  }
  
  //view_pos_fs_in
  view_pos_fs_in = view * modelMatrix * interp;
  //result
  pos_fs_in = proj * view_pos_fs_in;


  //normal_fs_in
  // https://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/geometry/transforming-normals
  normal_fs_in = normalize((transpose(inverse(view)) * transpose(inverse(modelMatrix)) * interp).xyz);


  gl_Position = pos_fs_in;
  /////////////////////////////////////////////////////////////////////////////
}


